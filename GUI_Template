package petris;

import javafx.application.Application;
import static javafx.application.Application.launch;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Stage;
import javafx.scene.layout.GridPane;
import javafx.scene.text.Text;

public class GUI_Template extends Application {
    
    private final Pane board = new Pane();
    
    public static void main(String[] args) {
        launch(args);
    }
    
    @Override
    public void start(Stage primaryStage) {
        GUIController gui = new GUIController();
        GridPane mainGrid = new GridPane();
        
        mainGrid.setMinSize(600,500);
        mainGrid.setPadding(new Insets(0, 0, 10, 20));
        mainGrid.setVgap(5); 
        mainGrid.setHgap(5);
        //mainGrid.setGridLinesVisible(false);
        mainGrid.add(gui.getBoard(), 1, 0);
        mainGrid.add(scoresRule(), 0, 0);
        mainGrid.add(nextPentomino(), 2, 0);
        
        primaryStage.setTitle("Test");
        
        StackPane root = new StackPane();
        root.getChildren().add(mainGrid);
        
        Controlls controls = new Controlls(gui.backendGrid);
        EventHandler eventHandler = controls.setControls();
        Scene scene = new Scene(root, 600, 780);
        scene.addEventFilter(KeyEvent.KEY_PRESSED, eventHandler);
        primaryStage.setScene(scene);
        primaryStage.setMinWidth(600);
        primaryStage.setMaxWidth(600);
        primaryStage.setMinHeight(780);
        primaryStage.show();
            
        for (int i = 0; i < 15; i++){
            for(int x = 0; x < 5; x++){
                //call the rectangle creation method
                Rectangle backgroundRec = new Rectangle(50,50);
                backgroundRec.setFill(Color.GRAY);
                backgroundRec.setStroke(Color.BLACK);
                //set width and height of rectangle
                backgroundRec.setTranslateX(x * 50);
                backgroundRec.setTranslateY(i * 50);
                //add the rectangle to the board
                board.getChildren().add(backgroundRec);
            }
        }
    }
    
    
    public Parent board(){
        board.setPrefSize(600,750);
        return board;
    }
    
    public Parent scoresRule(){
        //make two rows for scores and rules
        GridPane scoresRule = new GridPane();
        scoresRule.setMinSize(125, 730);
        scoresRule.setPadding(new Insets(0, 0, 20, 0));
        scoresRule.setHgap(5);
        scoresRule.setGridLinesVisible(false);
        scoresRule.add(score(), 0, 0);
        scoresRule.add(rules(), 0, 1);
        return scoresRule;
    }
    
    public Parent score(){
        //make 4 rows for scores
        GridPane score = new GridPane();
        score.setMinSize(125, 375);
        score.setPadding(new Insets(20, 0, 0, 0));
        score.setGridLinesVisible(false);
        Text Highscore = new Text("Highscore");
        Text highscore = new Text("1000  \n");
        Text Currentscore = new Text("Current score");
        Text currentscore = new Text("0");
        score.add(Highscore, 0, 0);
        score.add(highscore, 0, 1);
        score.add(Currentscore, 0, 2);
        score.add(currentscore, 0, 3);
        
        return score;
    }
    public Parent rules(){
        // make 2 rows for rules and controls
        GridPane rules = new GridPane();
        rules.setMinSize(125, 375);
        rules.setGridLinesVisible(false);
        Text controls = new Text("Controls \n");
        Text rule = new Text("Rules");
        
        rules.add(controls, 0, 1);
        rules.add(rule, 0, 2);
        
        return rules;
    }
    
    public Parent nextPentomino(){
        //add some text to the last column
        GridPane nextPentomino = new GridPane();
        nextPentomino.setMinSize(200, 750);
        nextPentomino.setPadding(new Insets(20, 0, 0, 20));
        nextPentomino.setVgap(5); 
        nextPentomino.setHgap(5);
        //nextPentomino.setGridLinesVisible(true);
        Text pentomino = new Text("Next pentomino");
        nextPentomino.add(pentomino, 0, 0);
        return nextPentomino;
    }
}
