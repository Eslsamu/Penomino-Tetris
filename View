import javafx.animation.AnimationTimer;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.Shape;
import javafx.util.Duration;

public class View{
    private Pane board = new Pane();
    private Scene scene;
    private Timeline timeline;
    private AnimationTimer timer;
    BackendGrid backendGrid = new BackendGrid();
    
    public View(){
        backendGrid.start();
        board.setPrefSize(250, 750);
        
    }
    public Scene getScene(){
        Controlls controls = new Controlls(backendGrid);
        EventHandler eventHandler = controls.setControls();
        scene = new Scene(getBoard());
        scene.addEventFilter(KeyEvent.KEY_PRESSED, eventHandler);
        return scene;
    }
    public void Animation(){
        Rectangle position1 = new Rectangle(50, 50);
        Rectangle position2 = new Rectangle(50, 50);
        Rectangle position3 = new Rectangle(50, 50);
        Rectangle position4 = new Rectangle(50, 50);
        Rectangle position5 = new Rectangle(50, 50);
        
        position1.setStroke(Color.BLACK);
        position2.setStroke(Color.BLACK);
        position3.setStroke(Color.BLACK);
        position4.setStroke(Color.BLACK);
        position5.setStroke(Color.BLACK);
        
        switch(backendGrid.getFallingBlock().getColorIndex()){
                    case 0: position1.setFill(Color.MIDNIGHTBLUE); position2.setFill(Color.MIDNIGHTBLUE); position3.setFill(Color.MIDNIGHTBLUE); 
                            position4.setFill(Color.MIDNIGHTBLUE); position5.setFill(Color.MIDNIGHTBLUE); break;
                    
                    case 1: position1.setFill(Color.SEAGREEN); position2.setFill(Color.SEAGREEN); position3.setFill(Color.SEAGREEN); 
                            position4.setFill(Color.SEAGREEN); position5.setFill(Color.SEAGREEN); break;
                    
                    case 2: position1.setFill(Color.CORAL); position2.setFill(Color.CORAL); position3.setFill(Color.CORAL);
                            position4.setFill(Color.CORAL); position5.setFill(Color.CORAL); break;
                    
                    case 3: position1.setFill(Color.SKYBLUE); position2.setFill(Color.SKYBLUE); position3.setFill(Color.SKYBLUE);
                            position4.setFill(Color.SKYBLUE); position5.setFill(Color.SKYBLUE); break;
                    
                    case 4: position1.setFill(Color.INDIGO); position2.setFill(Color.INDIGO); position3.setFill(Color.INDIGO); 
                            position4.setFill(Color.INDIGO); position5.setFill(Color.INDIGO); break;
                    
                    case 5: position1.setFill(Color.YELLOW); position2.setFill(Color.YELLOW); position3.setFill(Color.YELLOW); 
                            position4.setFill(Color.YELLOW); position5.setFill(Color.YELLOW); break;
                    
                    case 6: position1.setFill(Color.PERU); position2.setFill(Color.PERU); position3.setFill(Color.PERU);
                            position4.setFill(Color.PERU); position5.setFill(Color.PERU); break;
                    
                    case 7: position1.setFill(Color.LIGHTGRAY); position2.setFill(Color.LIGHTGRAY); position3.setFill(Color.LIGHTGRAY);
                            position4.setFill(Color.LIGHTGRAY); position5.setFill(Color.LIGHTGRAY); break;
                    
                    case 8: position1.setFill(Color.AQUA); position2.setFill(Color.AQUA); position3.setFill(Color.AQUA); 
                            position4.setFill(Color.AQUA); position5.setFill(Color.AQUA); break;
                    
                    case 9: position1.setFill(Color.YELLOWGREEN); position2.setFill(Color.YELLOWGREEN); position3.setFill(Color.YELLOWGREEN);
                            position4.setFill(Color.YELLOWGREEN); position5.setFill(Color.YELLOWGREEN); break;
                    
                    case 10: position1.setFill(Color.ROSYBROWN); position2.setFill(Color.ROSYBROWN); position3.setFill(Color.ROSYBROWN);
                             position4.setFill(Color.ROSYBROWN); position5.setFill(Color.ROSYBROWN); break;
                    
                    case 11: position1.setFill(Color.SIENNA); position2.setFill(Color.SIENNA); position3.setFill(Color.SIENNA);
                             position4.setFill(Color.SIENNA); position5.setFill(Color.SIENNA); break;
                    
                    case 12: position1.setFill(Color.RED); position2.setFill(Color.RED); position3.setFill(Color.RED); 
                             position4.setFill(Color.RED); position5.setFill(Color.RED); break;
                    
        }
        
        board.getChildren().add(position1);
        board.getChildren().add(position2);
        board.getChildren().add(position3);
        board.getChildren().add(position4);
        board.getChildren().add(position5);
        
        timeline = new Timeline();
        timeline.setCycleCount(Timeline.INDEFINITE);
        timer = new AnimationTimer(){
            @Override
            public void handle(long l){
                int[][] coordinates =  backendGrid.getFallingBlock().getCoordinates();
                switch(backendGrid.getFallingBlock().getColorIndex()){
                    case 0: position1.setFill(Color.MIDNIGHTBLUE); position2.setFill(Color.MIDNIGHTBLUE); position3.setFill(Color.MIDNIGHTBLUE); 
                            position4.setFill(Color.MIDNIGHTBLUE); position5.setFill(Color.MIDNIGHTBLUE); break;
                    
                    case 1: position1.setFill(Color.SEAGREEN); position2.setFill(Color.SEAGREEN); position3.setFill(Color.SEAGREEN); 
                            position4.setFill(Color.SEAGREEN); position5.setFill(Color.SEAGREEN); break;
                    
                    case 2: position1.setFill(Color.CORAL); position2.setFill(Color.CORAL); position3.setFill(Color.CORAL);
                            position4.setFill(Color.CORAL); position5.setFill(Color.CORAL); break;
                    
                    case 3: position1.setFill(Color.SKYBLUE); position2.setFill(Color.SKYBLUE); position3.setFill(Color.SKYBLUE);
                            position4.setFill(Color.SKYBLUE); position5.setFill(Color.SKYBLUE); break;
                    
                    case 4: position1.setFill(Color.INDIGO); position2.setFill(Color.INDIGO); position3.setFill(Color.INDIGO); 
                            position4.setFill(Color.INDIGO); position5.setFill(Color.INDIGO); break;
                    
                    case 5: position1.setFill(Color.YELLOW); position2.setFill(Color.YELLOW); position3.setFill(Color.YELLOW); 
                            position4.setFill(Color.YELLOW); position5.setFill(Color.YELLOW); break;
                    
                    case 6: position1.setFill(Color.PERU); position2.setFill(Color.PERU); position3.setFill(Color.PERU);
                            position4.setFill(Color.PERU); position5.setFill(Color.PERU); break;
                    
                    case 7: position1.setFill(Color.LIGHTGRAY); position2.setFill(Color.LIGHTGRAY); position3.setFill(Color.LIGHTGRAY);
                            position4.setFill(Color.LIGHTGRAY); position5.setFill(Color.LIGHTGRAY); break;
                    
                    case 8: position1.setFill(Color.AQUA); position2.setFill(Color.AQUA); position3.setFill(Color.AQUA); 
                            position4.setFill(Color.AQUA); position5.setFill(Color.AQUA); break;
                    
                    case 9: position1.setFill(Color.YELLOWGREEN); position2.setFill(Color.YELLOWGREEN); position3.setFill(Color.YELLOWGREEN);
                            position4.setFill(Color.YELLOWGREEN); position5.setFill(Color.YELLOWGREEN); break;
                    
                    case 10: position1.setFill(Color.ROSYBROWN); position2.setFill(Color.ROSYBROWN); position3.setFill(Color.ROSYBROWN);
                             position4.setFill(Color.ROSYBROWN); position5.setFill(Color.ROSYBROWN); break;
                    
                    case 11: position1.setFill(Color.SIENNA); position2.setFill(Color.SIENNA); position3.setFill(Color.SIENNA);
                             position4.setFill(Color.SIENNA); position5.setFill(Color.SIENNA); break;
                    
                    case 12: position1.setFill(Color.RED); position2.setFill(Color.RED); position3.setFill(Color.RED); 
                             position4.setFill(Color.RED); position5.setFill(Color.RED); break;
                    
                }
                updateBackground();
                position1.setTranslateY(coordinates[1][0]*50);
                position1.setTranslateX(coordinates[0][0]*50);
                position2.setTranslateY(coordinates[1][1]*50);
                position2.setTranslateX(coordinates[0][1]*50);
                position3.setTranslateY(coordinates[1][2]*50);
                position3.setTranslateX(coordinates[0][2]*50);
                position4.setTranslateY(coordinates[1][3]*50);
                position4.setTranslateX(coordinates[0][3]*50);
                position5.setTranslateY(coordinates[1][4]*50);
                position5.setTranslateX(coordinates[0][4]*50);
                if(backendGrid.gameOverCheck() == true){
                    timeline.stop();
                    timer.stop();
                }
            }
        };
        
        Duration duration = Duration.millis(500);
        
        EventHandler onFinished = new EventHandler<ActionEvent>(){
            @Override
            public void handle(ActionEvent t){
                backendGrid.move(Direction.DOWN);
                backendGrid.testPrint(backendGrid.getFallingBlock());
            }
        };
        
        KeyFrame keyFrame = new KeyFrame(duration, onFinished);
        
        timeline.getKeyFrames().add(keyFrame);
        timeline.play();
        timer.start();
    }
    public void updateBackground(){
        int count = 0;
        int[][] grid = backendGrid.getGrid();
        for(int i = 0; i < grid.length ; i++){
            for(int x = 0; x < grid[0].length; x++){
                Rectangle rec = new Rectangle(50, 50);
                rec.setTranslateX(x * 50);
                rec.setTranslateY(i * 50);
                board.getChildren().set(count, rec);
                rec.setStroke(Color.BLACK);
                
                switch(grid[i][x]){
                    case 0: rec.setFill(Color.MIDNIGHTBLUE); break;
                    case 1: rec.setFill(Color.SEAGREEN); break;
                    case 2: rec.setFill(Color.CORAL); break;
                    case 3: rec.setFill(Color.SKYBLUE); break;
                    case 4: rec.setFill(Color.INDIGO); break;
                    case 5: rec.setFill(Color.YELLOW); break;
                    case 6: rec.setFill(Color.PERU); break;
                    case 7: rec.setFill(Color.LIGHTGRAY); break;
                    case 8: rec.setFill(Color.AQUA); break;
                    case 9: rec.setFill(Color.YELLOWGREEN); break;
                    case 10: rec.setFill(Color.ROSYBROWN); break;
                    case 11: rec.setFill(Color.SIENNA); break;
                    case 12: rec.setFill(Color.RED); break;
                    
                }
                count++;
            }
        }
    }
    public void setBackground(){
        int count = 0;
        int[][] grid = backendGrid.getGrid();
        for(int i = 0; i < grid.length ; i++){
            for(int x = 0; x < grid[0].length; x++){
                    Rectangle rec = new Rectangle(50, 50);
                    rec.setFill(Color.MIDNIGHTBLUE);
                    rec.setStroke(Color.BLACK);
                    rec.setTranslateX(x * 50);
                    rec.setTranslateY(i * 50);
                    board.getChildren().add(count, rec);
                    count++;
            }
        }
    }
    public Parent getBoard(){
        setBackground();
        Animation();
        
        return board;
    }
}

